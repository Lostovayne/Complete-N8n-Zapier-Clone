name: Build and Deploy to DigitalOcean

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAME: deusnextjs # Cambia esto por el nombre de tu registry
  IMAGE_NAME: next16 # Cambia esto por el nombre de tu app
  DOCKERFILE_PATH: prod.dockerfile

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Extract metadata for Docker
        id: meta
        run: |
          echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker buildx build \
            --file ${{ env.DOCKERFILE_PATH }} \
            --tag ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }} \
            --tag ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.date }} \
            --load \
            .

      - name: Check image size
        run: |
          echo "üìä Image size information:"
          docker images ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

          IMAGE_SIZE=$(docker images ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --format "{{.Size}}")
          echo "‚úÖ Image size: ${IMAGE_SIZE}"

      - name: Push Docker image to Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }}
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.date }}

      - name: Output image tags
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "üöÄ Pushed images:"
          echo "  - latest"
          echo "  - ${{ steps.meta.outputs.sha_short }}"
          echo "  - ${{ steps.meta.outputs.date }}"

  # deploy:
  #   name: Deploy to Production
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #
  #   steps:
  #     - name: Deploy to DigitalOcean Droplet
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.DROPLET_IP }}
  #         username: ${{ secrets.DROPLET_USERNAME }}
  #         key: ${{ secrets.DROPLET_SSH_KEY }}
  #         script: |
  #           # Login to DigitalOcean Container Registry
  #           echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com \
  #             -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
  #             --password-stdin
  #
  #           # Pull latest image
  #           docker pull ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
  #
  #           # Stop and remove existing container
  #           docker stop ${{ env.IMAGE_NAME }} 2>/dev/null || true
  #           docker rm ${{ env.IMAGE_NAME }} 2>/dev/null || true
  #
  #           # Run new container
  #           docker run -d \
  #             --name ${{ env.IMAGE_NAME }} \
  #             -p 3000:3000 \
  #             --env-file /home/${{ secrets.DROPLET_USERNAME }}/.env \
  #             --restart unless-stopped \
  #             --log-opt max-size=10m \
  #             --log-opt max-file=3 \
  #             ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
  #
  #           # Clean up old images (keep last 3)
  #           docker image prune -af --filter "until=72h"
  #
  #           # Verify deployment
  #           echo "‚úÖ Container status:"
  #           docker ps --filter name=${{ env.IMAGE_NAME }}
  #
  #     - name: Health check
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.DROPLET_IP }}
  #         username: ${{ secrets.DROPLET_USERNAME }}
  #         key: ${{ secrets.DROPLET_SSH_KEY }}
  #         script: |
  #           # Wait for container to be ready
  #           sleep 5
  #
  #           # Check if container is running
  #           if docker ps | grep -q ${{ env.IMAGE_NAME }}; then
  #             echo "‚úÖ Container is running successfully"
  #             docker logs --tail 20 ${{ env.IMAGE_NAME }}
  #           else
  #             echo "‚ùå Container failed to start"
  #             docker logs --tail 50 ${{ env.IMAGE_NAME }}
  #             exit 1
  #           fi
